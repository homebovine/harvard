}
np <- ncol(survData)
n <- nrow(survData)
y1 <- pmin(survData[, 1], survData[, 3])
y2 <- survData[, 3]
d1 <- survData[, 2]
d2 <- survData[, 4]

v <- rep(0, n)
covmy <- matrix(survData[, (5 : np)], ncol =  np - 4)
   

       
resp <- cbind(d1, d2, y1, y2, v)
colnames(resp) <- cbind("d1", "d2", "y1", "y2", "v")
res <- rbind(res, iniestreal1(theta, bb, resp, covmy)$par)
    print(res[i, 3 * p + 3 * pl + 1])
   #

n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
res
Q
res
res
q()
y
simwei2
res
nk
nk <- 22
pl <- 22
res
res
res
res
q()
y
source("xufunleft.r")
nk <- 20
pl <- 20
bb <- c(1, 1, 1)
theta <- 0.5
pl <- 21
res
res
res
res
apply(res, 2, median)
apply(res, 2, mean)
res[[1]]
install.packages(orthogonalsplinebasis)
install.packages("orthogonalsplinebasis")
res[[1]]
ord <- 2
res
apply(mres, 2, median)
apply(mres, 2, mean)
apply(mres, 2, mean)
apply(mres, 2, median)
res[[1]]
n
nk
apply(mres, 2, median)
res[[2]]
ord
p
resfun(1)
theta
res[[2]]
res[[10]]
debug(margpartial4)
resfun(1)
n
n
n
n
n
pl1
n
n
p
n
sp1
n
n
n
theta
n
n
n
n
n
n
n
n
n
n
n
n
c
undebug(margpartial4)
Q
simwei2
res <- mclapply(1:1000, resfun, mc.cores = 10)
nk
nk <- 10
res[[1]]
res[[2]]
res[[i]]
margpartial4
iniestreal4
theta
bb
simwei2
res[[i]]
i
table(resp[, 1], resp[, 2])
res
res[[i]]
ls()
1e-10
1.e-10
options(digits = )
options(digits)
options(digits)
rm(list = ls())
p
iniestreal4
res
ls()
bb
theta
str(covmy)
q()
n
